{"ast":null,"code":"import { LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH, SAVE_LISTING, SORT_BY_POPULARITY, CLEAR_SEARCH, INCOMPLETE_ONBOARDING } from \"./actionConstants\";\nimport { login, clearSearchForUser, userNotCompletedOnboarding, saveUserListing, getListings, listingsByPopularity, getUserSavedListings, userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser } from \"../data/data\";\nimport store from \"./store\";\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user: user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n// Eventually this action creator would be re-written to connect to a real data source\n\nexport const validateUser = (username, password) => {\n  let user = login(username, password);\n  if (user.id) return loginSuccess(user);else return loginFail(); // No case for a network error yet\n};\nexport const getSavedListings = () => {\n  let userId = store.getState().user.id;\n  return {\n    type: SAVE_LISTING,\n    payload: {\n      saved: getUserSavedListings(userId)\n    }\n  };\n}; // Note for future: need to handle error from data source\n\nexport const getUserListings = () => {\n  const userId = store.getState().user.id;\n  const listings = getListings(userId);\n  return {\n    type: POPULATE_SEARCH,\n    payload: {\n      listings: listings\n    }\n  };\n};\nexport const getPopularityListing = e => {\n  let userId = store.getState().user.id;\n  let popularity;\n  popularity = e.target.checked ? listingsByPopularity(userId) : popularity = getListings(userId);\n  return {\n    type: SORT_BY_POPULARITY,\n    payload: {\n      popularity: popularity\n    }\n  };\n};\nexport const addPreference = preference => {\n  let user = store.getState().user.id;\n  let updatedPreferences = addPreferenceForUser(user, preference);\n  return {\n    type: POPULATE_SEARCH,\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const removePreference = preferences => {\n  let userId = store.getState().user.id;\n  let updatedPreferences = removePreferenceForUser(userId, preferences);\n  return {\n    type: POPULATE_SEARCH,\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const clearSearch = () => {\n  let userId = store.getState().user.id;\n  let clear = clearSearchForUser(userId);\n  return {\n    type: CLEAR_SEARCH,\n    payload: {\n      search: clear.search,\n      listings: clear.listings\n    }\n  };\n};\nexport const saveListing = listing => {\n  let userId = store.getState().user.id;\n  let updatedSave = saveUserListing(userId, listing);\n  return {\n    type: SAVE_LISTING,\n    payload: {\n      saved: updatedSave\n    }\n  };\n};\nexport const completeOnboarding = () => {\n  let userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const incompleteOnboarding = () => {\n  let userId = store.getState().user.id;\n  userNotCompletedOnboarding(userId);\n  return {\n    type: INCOMPLETE_ONBOARDING\n  };\n};\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment4/src/redux/actions.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","COMPLETE_ONBOARDING","LOGOUT","POPULATE_SEARCH","SAVE_LISTING","SORT_BY_POPULARITY","CLEAR_SEARCH","INCOMPLETE_ONBOARDING","login","clearSearchForUser","userNotCompletedOnboarding","saveUserListing","getListings","listingsByPopularity","getUserSavedListings","userCompletedOnboarding","addPreferenceForUser","removePreferenceForUser","store","loginSuccess","user","type","payload","loginFail","loginNetworkError","validateUser","username","password","id","getSavedListings","userId","getState","saved","getUserListings","listings","getPopularityListing","e","popularity","target","checked","addPreference","preference","updatedPreferences","removePreference","preferences","clearSearch","clear","search","saveListing","listing","updatedSave","completeOnboarding","incompleteOnboarding","logout"],"mappings":"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","sourcesContent":["import {LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, \n    COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH, SAVE_LISTING,\n    SORT_BY_POPULARITY,CLEAR_SEARCH,INCOMPLETE_ONBOARDING} from \"./actionConstants\";\nimport {login, clearSearchForUser, userNotCompletedOnboarding,\n    saveUserListing,getListings, listingsByPopularity,getUserSavedListings,\n    userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser} from \"../data/data\";\nimport store from \"./store\";\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user: user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n\n// Eventually this action creator would be re-written to connect to a real data source\nexport const validateUser = (username, password) => {\n    let user = login(username, password);\n    if (user.id)\n        return loginSuccess(user);\n    else return loginFail();\n    // No case for a network error yet\n}\n\nexport const getSavedListings = () => {\n    \n    let userId = store.getState().user.id;\n    return {\n        type: SAVE_LISTING,\n        payload: {\n            saved: getUserSavedListings(userId)\n        }\n    }\n}\n\n// Note for future: need to handle error from data source\nexport const getUserListings = () => {\n    const userId = store.getState().user.id;\n    const listings = getListings(userId);\n\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: listings\n        }\n    }\n}\n\nexport const getPopularityListing = (e) => {\n    \n    let userId = store.getState().user.id;\n    let popularity;\n\n    popularity = (e.target.checked)? listingsByPopularity(userId):popularity = getListings(userId);\n    \n\n    return {\n        type: SORT_BY_POPULARITY,\n        payload: {\n            popularity: popularity\n        }\n    }\n}\n\nexport const addPreference = preference => {\n    \n    let user = store.getState().user.id;\n    let updatedPreferences = addPreferenceForUser(user, preference);\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const removePreference = preferences => {\n    \n    let userId = store.getState().user.id;\n    let updatedPreferences = removePreferenceForUser(userId, preferences);\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const clearSearch = () => {\n    \n    let userId = store.getState().user.id;\n    let clear = clearSearchForUser(userId);\n    return {\n        type: CLEAR_SEARCH,\n        payload: {\n            search: clear.search,\n            listings: clear.listings\n        }\n    }\n};\n\nexport const saveListing = listing => {\n    \n    let userId = store.getState().user.id;\n    let updatedSave = saveUserListing(userId, listing);\n    return {\n        type: SAVE_LISTING,\n        payload: {\n            saved: updatedSave\n        }\n    }\n};\n\nexport const completeOnboarding = () => {\n    \n    let userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const incompleteOnboarding = () => {\n    \n    let userId = store.getState().user.id;\n    userNotCompletedOnboarding(userId);\n    return {\n        type: INCOMPLETE_ONBOARDING\n    }\n}\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n"]},"metadata":{},"sourceType":"module"}