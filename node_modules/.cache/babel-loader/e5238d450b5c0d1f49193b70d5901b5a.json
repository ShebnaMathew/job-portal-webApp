{"ast":null,"code":"import { LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH } from \"./actionConstants\";\nimport { login, getPreferences, toggleTodoForUser, getListings, userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser } from \"../data/data\";\nimport store from \"./store\";\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n// Eventually this action creator would be re-written to connect to a real data source\n\nexport const validateUser = (username, password) => {\n  let user = login(username, password);\n  if (user.id) return loginSuccess(user);else return loginFail(); // No case for a network error yet\n}; // Note for future: need to handle error from data source\n\nexport const getUserListings = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const listings = getListings(userId);\n  return {\n    type: POPULATE_SEARCH,\n    payload: {\n      listings: listings\n    }\n  };\n};\nexport const addPreference = preference => {\n  // Gets the current user from the store. Note the store import above.\n  const user = store.getState().user.id;\n  const updatedPreferences = addPreferenceForUser(user, preference);\n  return {\n    type: POPULATE_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const removePreference = preferences => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedPreferences = removePreferenceForUser(userId, preferences);\n  return {\n    type: POPULATE_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const saveListing = listing => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedPreferences = saveUserListing(userId, listing);\n  return {\n    type: POPULATE_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const completeOnboarding = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment4/src/redux/actions.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","COMPLETE_ONBOARDING","LOGOUT","POPULATE_SEARCH","login","getPreferences","toggleTodoForUser","getListings","userCompletedOnboarding","addPreferenceForUser","removePreferenceForUser","store","loginSuccess","user","type","payload","loginFail","loginNetworkError","validateUser","username","password","id","getUserListings","userId","getState","listings","addPreference","preference","updatedPreferences","removePreference","preferences","saveListing","listing","saveUserListing","completeOnboarding","logout"],"mappings":"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","sourcesContent":["import {LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, \n    COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH} from \"./actionConstants\";\nimport {login, getPreferences, toggleTodoForUser,getListings, userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser} from \"../data/data\";\nimport store from \"./store\";\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n\n // Eventually this action creator would be re-written to connect to a real data source\nexport const validateUser = (username, password) => {\n    let user = login(username, password);\n    if (user.id)\n        return loginSuccess(user);\n    else return loginFail();\n    // No case for a network error yet\n}\n\n// Note for future: need to handle error from data source\nexport const getUserListings = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const listings = getListings(userId);\n\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: listings\n        }\n    }\n}\n\nexport const addPreference = preference => {\n    // Gets the current user from the store. Note the store import above.\n    const user = store.getState().user.id;\n    const updatedPreferences = addPreferenceForUser(user, preference);\n    return {\n        type: POPULATE_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const removePreference = preferences => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedPreferences = removePreferenceForUser(userId, preferences);\n    return {\n        type: POPULATE_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const saveListing = listing => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedPreferences = saveUserListing(userId, listing);\n    return {\n        type: POPULATE_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const completeOnboarding = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n"]},"metadata":{},"sourceType":"module"}