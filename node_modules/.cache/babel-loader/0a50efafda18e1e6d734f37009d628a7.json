{"ast":null,"code":"import { TOGGLE_TODO, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, POPULATE_TODOS, COMPLETE_ONBOARDING, LOGOUT } from \"./actionConstants\";\nimport { login, getTodosForUser, toggleTodoForUser, addTodoForUser, userCompletedOnboarding } from \"../data/data\";\nimport store from \"./store\";\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n// Eventually this action creator would be re-written to connect to a real data source\n\nexport const validateUser = (username, password) => {\n  let user = login(username, password);\n  if (user.id) return loginSuccess(user);else return loginFail(); // No case for a network error yet\n}; // Note for future: need to handle error from data source\n\nexport const getTodos = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  return {\n    type: POPULATE_TODOS,\n    payload: {\n      todos: getTodosForUser(userId)\n    }\n  };\n};\nexport const toggleTodo = id => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedTodo = toggleTodoForUser(userId, id);\n  return {\n    type: TOGGLE_TODO,\n    payload: {\n      id: updatedTodo\n    }\n  };\n};\nexport const addTodo = text => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedTodos = addTodoForUser(userId, text);\n  return {\n    type: POPULATE_TODOS,\n    // Can reuse an action type if it fits\n    payload: {\n      todos: updatedTodos\n    }\n  };\n};\nexport const completeOnboarding = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment4/src/redux/actions.js"],"names":["TOGGLE_TODO","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","POPULATE_TODOS","COMPLETE_ONBOARDING","LOGOUT","login","getTodosForUser","toggleTodoForUser","addTodoForUser","userCompletedOnboarding","store","loginSuccess","user","type","payload","loginFail","loginNetworkError","validateUser","username","password","id","getTodos","userId","getState","todos","toggleTodo","updatedTodo","addTodo","text","updatedTodos","completeOnboarding","logout"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,aAArB,EAAoCC,aAApC,EAAmDC,mBAAnD,EACIC,cADJ,EACoBC,mBADpB,EACyCC,MADzC,QACsD,mBADtD;AAEA,SAAQC,KAAR,EAAeC,eAAf,EAAgCC,iBAAhC,EAAmDC,cAAnD,EAAmEC,uBAAnE,QAAiG,cAAjG;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,MAAMC,YAAY,GAAGC,IAAI,KAAK;AACjCC,EAAAA,IAAI,EAAEd,aAD2B;AAEjCe,EAAAA,OAAO,EAAE;AACLF,IAAAA;AADK;AAFwB,CAAL,CAAzB;AAOP,OAAO,MAAMG,SAAS,GAAG,OAAO;AAC5BF,EAAAA,IAAI,EAAEb;AADsB,CAAP,CAAlB;AAIP,OAAO,MAAMgB,iBAAiB,GAAG,OAAO;AACpCH,EAAAA,IAAI,EAAEZ;AAD8B,CAAP,CAA1B;AAIP;AACA;AACA;AAEC;;AACD,OAAO,MAAMgB,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChD,MAAIP,IAAI,GAAGP,KAAK,CAACa,QAAD,EAAWC,QAAX,CAAhB;AACA,MAAIP,IAAI,CAACQ,EAAT,EACI,OAAOT,YAAY,CAACC,IAAD,CAAnB,CADJ,KAEK,OAAOG,SAAS,EAAhB,CAJ2C,CAKhD;AACH,CANM,C,CAQP;;AACA,OAAO,MAAMM,QAAQ,GAAG,MAAM;AAC1B;AACA,QAAMC,MAAM,GAAGZ,KAAK,CAACa,QAAN,GAAiBX,IAAjB,CAAsBQ,EAArC;AACA,SAAO;AACHP,IAAAA,IAAI,EAAEX,cADH;AAEHY,IAAAA,OAAO,EAAE;AACLU,MAAAA,KAAK,EAAElB,eAAe,CAACgB,MAAD;AADjB;AAFN,GAAP;AAMH,CATM;AAWP,OAAO,MAAMG,UAAU,GAAGL,EAAE,IAAI;AAC5B;AACA,QAAME,MAAM,GAAGZ,KAAK,CAACa,QAAN,GAAiBX,IAAjB,CAAsBQ,EAArC;AACA,QAAMM,WAAW,GAAGnB,iBAAiB,CAACe,MAAD,EAASF,EAAT,CAArC;AACA,SAAO;AACHP,IAAAA,IAAI,EAAEf,WADH;AAEHgB,IAAAA,OAAO,EAAE;AACLM,MAAAA,EAAE,EAAEM;AADC;AAFN,GAAP;AAMH,CAVM;AAYP,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAI;AAC3B;AACA,QAAMN,MAAM,GAAGZ,KAAK,CAACa,QAAN,GAAiBX,IAAjB,CAAsBQ,EAArC;AACA,QAAMS,YAAY,GAAGrB,cAAc,CAACc,MAAD,EAASM,IAAT,CAAnC;AACA,SAAO;AACHf,IAAAA,IAAI,EAAEX,cADH;AACmB;AACtBY,IAAAA,OAAO,EAAE;AACLU,MAAAA,KAAK,EAAEK;AADF;AAFN,GAAP;AAMH,CAVM;AAYP,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACpC;AACA,QAAMR,MAAM,GAAGZ,KAAK,CAACa,QAAN,GAAiBX,IAAjB,CAAsBQ,EAArC;AACAX,EAAAA,uBAAuB,CAACa,MAAD,CAAvB;AACA,SAAO;AACHT,IAAAA,IAAI,EAAEV;AADH,GAAP;AAGH,CAPM;AASP,OAAO,MAAM4B,MAAM,GAAG,OAAO;AACzBlB,EAAAA,IAAI,EAAET;AADmB,CAAP,CAAf","sourcesContent":["import {TOGGLE_TODO, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, \n    POPULATE_TODOS, COMPLETE_ONBOARDING, LOGOUT} from \"./actionConstants\";\nimport {login, getTodosForUser, toggleTodoForUser, addTodoForUser, userCompletedOnboarding} from \"../data/data\";\nimport store from \"./store\";\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n\n // Eventually this action creator would be re-written to connect to a real data source\nexport const validateUser = (username, password) => {\n    let user = login(username, password);\n    if (user.id)\n        return loginSuccess(user);\n    else return loginFail();\n    // No case for a network error yet\n}\n\n// Note for future: need to handle error from data source\nexport const getTodos = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    return {\n        type: POPULATE_TODOS,\n        payload: {\n            todos: getTodosForUser(userId)\n        }\n    }\n}\n\nexport const toggleTodo = id => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedTodo = toggleTodoForUser(userId, id);\n    return {\n        type: TOGGLE_TODO,\n        payload: {\n            id: updatedTodo\n        }\n    }\n};\n\nexport const addTodo = text => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedTodos = addTodoForUser(userId, text);\n    return {\n        type: POPULATE_TODOS, // Can reuse an action type if it fits\n        payload: {\n            todos: updatedTodos\n        }\n    }\n};\n\nexport const completeOnboarding = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const logout = () => ({\n    type: LOGOUT\n});"]},"metadata":{},"sourceType":"module"}