{"ast":null,"code":"import { createStore } from \"redux\";\nimport { INITIAL_STATE, LOGIN_STATE } from \"./storeConstants\";\nimport { TOGGLE_TODO, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, POPULATE_SEARCH, SAVED_LISTING, COMPLETE_ONBOARDING, LOGOUT } from \"./actionConstants\";\nimport { act } from \"react-dom/cjs/react-dom-test-utils.production.min\";\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TOGGLE_TODO:\n      return { ...state,\n        todos: state.todos.map((todo, index) => {\n          if (index !== action.payload.id) return todo;\n          return {\n            text: todo.text,\n            isComplete: !todo.isComplete\n          };\n        })\n      };\n\n    case LOGIN_SUCCESS:\n      return { ...state,\n        loginState: LOGIN_STATE.LOGGED_IN,\n        user: action.payload.user\n      };\n\n    case INVALID_LOGIN:\n      return { ...state,\n        loginState: LOGIN_STATE.INVALID_LOGIN\n      };\n\n    case LOGIN_NETWORK_ERROR:\n      return { ...state,\n        loginState: LOGIN_STATE.NETWORK_ERROR\n      };\n\n    case POPULATE_SEARCH:\n      return { ...state,\n        listings: action.payload.listings\n      };\n\n    case POPULATE_SEARCH:\n      return { ...state,\n        saved: action.payload.saved\n      };\n\n    case COMPLETE_ONBOARDING:\n      return { ...state,\n        user: { ...state.user,\n          onboardingComplete: true\n        }\n      };\n\n    case LOGOUT:\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default createStore(rootReducer);","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment4/src/redux/store.js"],"names":["createStore","INITIAL_STATE","LOGIN_STATE","TOGGLE_TODO","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","POPULATE_SEARCH","SAVED_LISTING","COMPLETE_ONBOARDING","LOGOUT","act","rootReducer","state","action","type","todos","map","todo","index","payload","id","text","isComplete","loginState","LOGGED_IN","user","NETWORK_ERROR","listings","saved","onboardingComplete"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,kBAAzC;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,EAAoDC,mBAApD,EAAyEC,eAAzE,EAA0FC,aAA1F,EAAyGC,mBAAzG,EAA8HC,MAA9H,QAA4I,mBAA5I;AACA,SAASC,GAAT,QAAoB,mDAApB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGZ,aAAT,EAAwBa,MAAxB,KAAmC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,cAAIA,KAAK,KAAKL,MAAM,CAACM,OAAP,CAAeC,EAA7B,EACI,OAAOH,IAAP;AACJ,iBAAO;AACHI,YAAAA,IAAI,EAAEJ,IAAI,CAACI,IADR;AAEHC,YAAAA,UAAU,EAAE,CAACL,IAAI,CAACK;AAFf,WAAP;AAIH,SAPM;AAFJ,OAAP;;AAWJ,SAAKnB,aAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHW,QAAAA,UAAU,EAAEtB,WAAW,CAACuB,SAFrB;AAGHC,QAAAA,IAAI,EAAEZ,MAAM,CAACM,OAAP,CAAeM;AAHlB,OAAP;;AAKJ,SAAKrB,aAAL;AACI,aAAO,EAAC,GAAGQ,KAAJ;AAAWW,QAAAA,UAAU,EAAEtB,WAAW,CAACG;AAAnC,OAAP;;AACJ,SAAKC,mBAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWW,QAAAA,UAAU,EAAEtB,WAAW,CAACyB;AAAnC,OAAP;;AACJ,SAAKpB,eAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHe,QAAAA,QAAQ,EAAEd,MAAM,CAACM,OAAP,CAAeQ;AAFtB,OAAP;;AAIJ,SAAKrB,eAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHgB,QAAAA,KAAK,EAAEf,MAAM,CAACM,OAAP,CAAeS;AAFnB,OAAP;;AAIJ,SAAKpB,mBAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHa,QAAAA,IAAI,EAAE,EACF,GAAGb,KAAK,CAACa,IADP;AAEFI,UAAAA,kBAAkB,EAAE;AAFlB;AAFH,OAAP;;AAOJ,SAAKpB,MAAL;AACI,aAAOT,aAAP;;AACJ;AACI,aAAOY,KAAP;AA5CR;AA8CH,CA/CD;;AAiDA,eAAeb,WAAW,CAACY,WAAD,CAA1B","sourcesContent":["import {createStore} from \"redux\";\nimport {INITIAL_STATE, LOGIN_STATE} from \"./storeConstants\";\nimport { TOGGLE_TODO, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, POPULATE_SEARCH, SAVED_LISTING, COMPLETE_ONBOARDING, LOGOUT } from \"./actionConstants\";\nimport { act } from \"react-dom/cjs/react-dom-test-utils.production.min\";\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case TOGGLE_TODO:\n            return {\n                ...state,\n                todos: state.todos.map((todo, index) => {\n                    if (index !== action.payload.id)\n                        return todo;\n                    return {\n                        text: todo.text,\n                        isComplete: !todo.isComplete\n                    }\n                })\n            }\n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                loginState: LOGIN_STATE.LOGGED_IN,\n                user: action.payload.user\n            }\n        case INVALID_LOGIN:\n            return {...state, loginState: LOGIN_STATE.INVALID_LOGIN}\n        case LOGIN_NETWORK_ERROR:\n            return {...state, loginState: LOGIN_STATE.NETWORK_ERROR}\n        case POPULATE_SEARCH:\n            return {\n                ...state,\n                listings: action.payload.listings\n            }\n        case POPULATE_SEARCH:\n            return {\n                ...state,\n                saved: action.payload.saved\n            }\n        case COMPLETE_ONBOARDING:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    onboardingComplete: true\n                }\n            }\n        case LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}\n\nexport default createStore(rootReducer);"]},"metadata":{},"sourceType":"module"}