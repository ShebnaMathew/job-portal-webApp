{"ast":null,"code":"import{LOGIN_SUCCESS,INVALID_LOGIN,LOGIN_NETWORK_ERROR,COMPLETE_ONBOARDING,LOGOUT,POPULATE_SEARCH,SAVE_LISTING,SORT_BY_POPULARITY,CLEAR_SEARCH,INCOMPLETE_ONBOARDING}from\"./actionConstants\";import{login,clearSearchForUser,userNotCompletedOnboarding,saveUserListing,getListings,listingsByPopularity,getUserSavedListings,userCompletedOnboarding,addPreferenceForUser,removePreferenceForUser}from\"../data/data\";import store from\"./store\";export var loginSuccess=function loginSuccess(user){return{type:LOGIN_SUCCESS,payload:{user:user}};};export var loginFail=function loginFail(){return{type:INVALID_LOGIN};};export var loginNetworkError=function loginNetworkError(){return{type:LOGIN_NETWORK_ERROR};};/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */ // Eventually this action creator would be re-written to connect to a real data source\nexport var validateUser=function validateUser(username,password){var user=login(username,password);if(user.id)return loginSuccess(user);else return loginFail();// No case for a network error yet\n};export var getSavedListings=function getSavedListings(){var userId=store.getState().user.id;return{type:SAVE_LISTING,payload:{saved:getUserSavedListings(userId)}};};// Note for future: need to handle error from data source\nexport var getUserListings=function getUserListings(){var userId=store.getState().user.id;var listings=getListings(userId);return{type:POPULATE_SEARCH,payload:{listings:listings}};};export var getPopularityListing=function getPopularityListing(e){var userId=store.getState().user.id;var popularity;popularity=e.target.checked?listingsByPopularity(userId):getListings(userId);return{type:SORT_BY_POPULARITY,payload:{popularity:popularity}};};export var addPreference=function addPreference(preference){var user=store.getState().user.id;var updatedPreferences=addPreferenceForUser(user,preference);return{type:POPULATE_SEARCH,payload:{listings:updatedPreferences}};};export var removePreference=function removePreference(preferences){var userId=store.getState().user.id;var updatedPreferences=removePreferenceForUser(userId,preferences);return{type:POPULATE_SEARCH,payload:{listings:updatedPreferences}};};export var clearSearch=function clearSearch(){var userId=store.getState().user.id;var clear=clearSearchForUser(userId);return{type:CLEAR_SEARCH,payload:{search:clear.search,listings:clear.listings}};};export var saveListing=function saveListing(listing){var userId=store.getState().user.id;var updatedSave=saveUserListing(userId,listing);return{type:SAVE_LISTING,payload:{saved:updatedSave}};};export var completeOnboarding=function completeOnboarding(){var userId=store.getState().user.id;userCompletedOnboarding(userId);return{type:COMPLETE_ONBOARDING};};export var incompleteOnboarding=function incompleteOnboarding(){var userId=store.getState().user.id;userNotCompletedOnboarding(userId);return{type:INCOMPLETE_ONBOARDING};};export var logout=function logout(){return{type:LOGOUT};};","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/job-portal-webApp/src/redux/actions.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","COMPLETE_ONBOARDING","LOGOUT","POPULATE_SEARCH","SAVE_LISTING","SORT_BY_POPULARITY","CLEAR_SEARCH","INCOMPLETE_ONBOARDING","login","clearSearchForUser","userNotCompletedOnboarding","saveUserListing","getListings","listingsByPopularity","getUserSavedListings","userCompletedOnboarding","addPreferenceForUser","removePreferenceForUser","store","loginSuccess","user","type","payload","loginFail","loginNetworkError","validateUser","username","password","id","getSavedListings","userId","getState","saved","getUserListings","listings","getPopularityListing","e","popularity","target","checked","addPreference","preference","updatedPreferences","removePreference","preferences","clearSearch","clear","search","saveListing","listing","updatedSave","completeOnboarding","incompleteOnboarding","logout"],"mappings":"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","sourcesContent":["import {LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, \n    COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH, SAVE_LISTING,\n    SORT_BY_POPULARITY,CLEAR_SEARCH,INCOMPLETE_ONBOARDING} from \"./actionConstants\";\nimport {login, clearSearchForUser, userNotCompletedOnboarding,\n    saveUserListing,getListings, listingsByPopularity,getUserSavedListings,\n    userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser} from \"../data/data\";\nimport store from \"./store\";\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user: user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n\n// Eventually this action creator would be re-written to connect to a real data source\nexport const validateUser = (username, password) => {\n    let user = login(username, password);\n    if (user.id)\n        return loginSuccess(user);\n    else return loginFail();\n    // No case for a network error yet\n}\n\nexport const getSavedListings = () => {\n    let userId = store.getState().user.id;\n    return {\n        type: SAVE_LISTING,\n        payload: {\n            saved: getUserSavedListings(userId)\n        }\n    }\n}\n\n// Note for future: need to handle error from data source\nexport const getUserListings = () => {\n    let userId = store.getState().user.id;\n    let listings = getListings(userId);\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: listings\n        }\n    }\n}\n\nexport const getPopularityListing = (e) => {\n    let userId = store.getState().user.id;\n    let popularity;\n    popularity = (e.target.checked)? listingsByPopularity(userId): getListings(userId);\n    return {\n        type: SORT_BY_POPULARITY,\n        payload: {\n            popularity: popularity\n        }\n    }\n}\n\nexport const addPreference = preference => {\n    let user = store.getState().user.id;\n    let updatedPreferences = addPreferenceForUser(user, preference);\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const removePreference = preferences => {\n    let userId = store.getState().user.id;\n    let updatedPreferences = removePreferenceForUser(userId, preferences);\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const clearSearch = () => {\n    let userId = store.getState().user.id;\n    let clear = clearSearchForUser(userId);\n    return {\n        type: CLEAR_SEARCH,\n        payload: {\n            search: clear.search,\n            listings: clear.listings\n        }\n    }\n};\n\nexport const saveListing = listing => {\n    let userId = store.getState().user.id;\n    let updatedSave = saveUserListing(userId, listing);\n    return {\n        type: SAVE_LISTING,\n        payload: {\n            saved: updatedSave\n        }\n    }\n};\n\nexport const completeOnboarding = () => {\n    let userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const incompleteOnboarding = () => {\n    let userId = store.getState().user.id;\n    userNotCompletedOnboarding(userId);\n    return {\n        type: INCOMPLETE_ONBOARDING\n    }\n}\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n"]},"metadata":{},"sourceType":"module"}