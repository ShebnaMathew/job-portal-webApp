{"ast":null,"code":"import { LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH, SAVE_LISTING, SORT_BY_POPULARITY, CLEAR_SEARCH } from \"./actionConstants\";\nimport { login, clearSearchForUser, saveUserListing, getListings, listingsByPopularity, getUserSavedListings, userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser } from \"../data/data\";\nimport store from \"./store\";\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user: user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n// Eventually this action creator would be re-written to connect to a real data source\n\nexport const validateUser = (username, password) => {\n  let user = login(username, password);\n  if (user.id) return loginSuccess(user);else return loginFail(); // No case for a network error yet\n};\nexport const getSavedListings = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  return {\n    type: SAVE_LISTING,\n    payload: {\n      saved: getUserSavedListings(userId)\n    }\n  };\n}; // Note for future: need to handle error from data source\n\nexport const getUserListings = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const listings = getListings(userId);\n  return {\n    type: POPULATE_SEARCH,\n    payload: {\n      listings: listings\n    }\n  };\n};\nexport const getPopularityListing = e => {\n  console.log(\"pop event: \", e.target.checked);\n  const userId = store.getState().user.id;\n  var popularity;\n\n  if (e.target.checked) {\n    popularity = listingsByPopularity(userId);\n  } else {\n    popularity = getListings(userId);\n  }\n\n  console.log(\"popularity: \", popularity);\n  return {\n    type: SORT_BY_POPULARITY,\n    payload: {\n      popularity: popularity\n    }\n  };\n};\nexport const addPreference = preference => {\n  // Gets the current user from the store. Note the store import above.\n  const user = store.getState().user.id;\n  const updatedPreferences = addPreferenceForUser(user, preference);\n  return {\n    type: POPULATE_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const removePreference = preferences => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedPreferences = removePreferenceForUser(userId, preferences);\n  return {\n    type: POPULATE_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      listings: updatedPreferences\n    }\n  };\n};\nexport const clearSearch = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const clear = clearSearchForUser(userId);\n  return {\n    type: CLEAR_SEARCH,\n    // Can reuse an action type if it fits\n    payload: {\n      search: [],\n      listings: []\n    }\n  };\n};\nexport const saveListing = listing => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  const updatedSave = saveUserListing(userId, listing);\n  return {\n    type: SAVE_LISTING,\n    // Can reuse an action type if it fits\n    payload: {\n      saved: updatedSave\n    }\n  };\n};\nexport const completeOnboarding = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment4/src/redux/actions.js"],"names":["LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","COMPLETE_ONBOARDING","LOGOUT","POPULATE_SEARCH","SAVE_LISTING","SORT_BY_POPULARITY","CLEAR_SEARCH","login","clearSearchForUser","saveUserListing","getListings","listingsByPopularity","getUserSavedListings","userCompletedOnboarding","addPreferenceForUser","removePreferenceForUser","store","loginSuccess","user","type","payload","loginFail","loginNetworkError","validateUser","username","password","id","getSavedListings","userId","getState","saved","getUserListings","listings","getPopularityListing","e","console","log","target","checked","popularity","addPreference","preference","updatedPreferences","removePreference","preferences","clearSearch","clear","search","saveListing","listing","updatedSave","completeOnboarding","logout"],"mappings":"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","sourcesContent":["import {LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, \n    COMPLETE_ONBOARDING, LOGOUT, POPULATE_SEARCH, SAVE_LISTING,SORT_BY_POPULARITY,CLEAR_SEARCH} from \"./actionConstants\";\nimport {login, clearSearchForUser, saveUserListing,getListings, listingsByPopularity,getUserSavedListings,userCompletedOnboarding, addPreferenceForUser, removePreferenceForUser} from \"../data/data\";\nimport store from \"./store\";\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user: user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\n/** The following actions get/update mock data and would have to be refactored\n * if/when the data source is changed.\n */\n\n // Eventually this action creator would be re-written to connect to a real data source\nexport const validateUser = (username, password) => {\n    let user = login(username, password);\n    if (user.id)\n        return loginSuccess(user);\n    else return loginFail();\n    // No case for a network error yet\n}\n\nexport const getSavedListings = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    return {\n        type: SAVE_LISTING,\n        payload: {\n            saved: getUserSavedListings(userId)\n        }\n    }\n}\n\n// Note for future: need to handle error from data source\nexport const getUserListings = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const listings = getListings(userId);\n\n    return {\n        type: POPULATE_SEARCH,\n        payload: {\n            listings: listings\n        }\n    }\n}\n\nexport const getPopularityListing = (e) => {\n    console.log(\"pop event: \", e.target.checked)\n    const userId = store.getState().user.id;\n    var popularity;\n    if(e.target.checked){\n        popularity = listingsByPopularity(userId);\n    } else {\n        popularity = getListings(userId);\n    }\n\n    console.log(\"popularity: \", popularity)\n    return {\n        type: SORT_BY_POPULARITY,\n        payload: {\n            popularity: popularity\n        }\n    }\n}\n\nexport const addPreference = preference => {\n    // Gets the current user from the store. Note the store import above.\n    const user = store.getState().user.id;\n    const updatedPreferences = addPreferenceForUser(user, preference);\n    return {\n        type: POPULATE_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const removePreference = preferences => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedPreferences = removePreferenceForUser(userId, preferences);\n    return {\n        type: POPULATE_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            listings: updatedPreferences\n        }\n    }\n};\n\nexport const clearSearch = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const clear = clearSearchForUser(userId);\n    return {\n        type: CLEAR_SEARCH, // Can reuse an action type if it fits\n        payload: {\n            search: [],\n            listings: []\n        }\n    }\n};\n\nexport const saveListing = listing => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    const updatedSave = saveUserListing(userId, listing);\n    return {\n        type: SAVE_LISTING, // Can reuse an action type if it fits\n        payload: {\n            saved: updatedSave\n        }\n    }\n};\n\nexport const completeOnboarding = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n"]},"metadata":{},"sourceType":"module"}